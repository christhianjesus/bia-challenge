// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	consumption "github.com/christhianjesus/bia-challenge/internal/domain/consumption"
	consumptionperiods "github.com/christhianjesus/bia-challenge/internal/domain/consumptionperiods"

	mock "github.com/stretchr/testify/mock"

	period "github.com/christhianjesus/bia-challenge/internal/domain/period"

	time "time"
)

// ConsumptionPeriodsService is an autogenerated mock type for the ConsumptionPeriodsService type
type ConsumptionPeriodsService struct {
	mock.Mock
}

// GetConsumptionPeriods provides a mock function with given fields: consumptions, periods
func (_m *ConsumptionPeriodsService) GetConsumptionPeriods(consumptions []consumption.Consumption, periods []period.Period) consumptionperiods.ConsumptionPeriods {
	ret := _m.Called(consumptions, periods)

	var r0 consumptionperiods.ConsumptionPeriods
	if rf, ok := ret.Get(0).(func([]consumption.Consumption, []period.Period) consumptionperiods.ConsumptionPeriods); ok {
		r0 = rf(consumptions, periods)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consumptionperiods.ConsumptionPeriods)
		}
	}

	return r0
}

// GetPeriods provides a mock function with given fields: startDate, endDate, kindPeriod
func (_m *ConsumptionPeriodsService) GetPeriods(startDate time.Time, endDate time.Time, kindPeriod string) ([]period.Period, error) {
	ret := _m.Called(startDate, endDate, kindPeriod)

	var r0 []period.Period
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, string) ([]period.Period, error)); ok {
		return rf(startDate, endDate, kindPeriod)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, string) []period.Period); ok {
		r0 = rf(startDate, endDate, kindPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]period.Period)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time, string) error); ok {
		r1 = rf(startDate, endDate, kindPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumptionPeriodsService creates a new instance of ConsumptionPeriodsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumptionPeriodsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumptionPeriodsService {
	mock := &ConsumptionPeriodsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
