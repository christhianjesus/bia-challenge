// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	consumption "github.com/christhianjesus/bia-challenge/internal/domain/consumption"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ConsumptionRepository is an autogenerated mock type for the ConsumptionRepository type
type ConsumptionRepository struct {
	mock.Mock
}

// GetByMetersIDsAndDateRange provides a mock function with given fields: ctx, metersIDs, startDate, endDate
func (_m *ConsumptionRepository) GetByMetersIDsAndDateRange(ctx context.Context, metersIDs []int, startDate time.Time, endDate time.Time) ([]consumption.Consumption, error) {
	ret := _m.Called(ctx, metersIDs, startDate, endDate)

	var r0 []consumption.Consumption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int, time.Time, time.Time) ([]consumption.Consumption, error)); ok {
		return rf(ctx, metersIDs, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int, time.Time, time.Time) []consumption.Consumption); ok {
		r0 = rf(ctx, metersIDs, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]consumption.Consumption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, metersIDs, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumptionRepository creates a new instance of ConsumptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumptionRepository {
	mock := &ConsumptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
